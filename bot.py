import telebot
from telebot import types
from flask import Flask, request
import os
import openai

# --- üîπ –¢–æ–∫–µ–Ω–¥–µ—Ä–¥—ñ –∞–ª—É (Render environment-—Ç–µ–Ω) ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- üîπ “Æ–π –±–µ—Ç—ñ ---
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Bot is running!", 200

# --- üîπ Webhook –∂–∞“£–∞—Ä—Ç—É–ª–∞—Ä—ã–Ω “õ–∞–±—ã–ª–¥–∞—É ---
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

# --- üîπ /start –∫–æ–º–∞–Ω–¥–∞—Å—ã ---
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üíä –ö–µ“£–µ—Å –∞–ª—É (AI)"))
    markup.add(types.KeyboardButton("üìã “ö—ã–∑–º–µ—Ç —Ç“Ø—Ä–ª–µ—Ä—ñ"), types.KeyboardButton("üìû –ë–∞–π–ª–∞–Ω—ã—Å / –ñ–∞–∑—ã–ª—É"))
    markup.add(types.KeyboardButton("üì∞ –ñ–∞“£–∞–ª—ã“õ—Ç–∞—Ä / –ê–∫—Ü–∏—è–ª–∞—Ä"))
    bot.send_message(
        message.chat.id,
        "üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! *–ú–µ–¥–¶–µ–Ω—Ç—Ä+* “õ–∞–±—ã–ª–¥–∞—É –±”©–ª—ñ–º—ñ.\n"
        "–°–∏–º–ø—Ç–æ–º—ã“£—ã–∑–¥—ã –Ω–µ–º–µ—Å–µ —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ ‚Äî –±–æ—Ç –∂–∞–ª–ø—ã –∫–µ“£–µ—Å –±–µ—Ä–µ–¥—ñ.\n"
        "(–ï—Å–∫–µ—Ä—Ç—É: –±“±–ª —Ç–µ–∫ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –∫”©–º–µ–∫, –Ω–∞“õ—Ç—ã –¥–∏–∞–≥–Ω–æ–∑ “Ø—à—ñ–Ω –¥”ô—Ä—ñ–≥–µ—Ä–≥–µ –∂“Ø–≥—ñ–Ω—ñ“£—ñ–∑.)",
        parse_mode="Markdown",
        reply_markup=markup
    )

# --- üîπ –ë–∞—Ç—ã—Ä–º–∞–ª–∞—Ä –ª–æ–≥–∏–∫–∞—Å—ã ---
@bot.message_handler(func=lambda m: m.text == "üìã “ö—ã–∑–º–µ—Ç —Ç“Ø—Ä–ª–µ—Ä—ñ")
def services(message):
    bot.send_message(message.chat.id,
        "ü©∫ –ë—ñ–∑–¥—ñ“£ “õ—ã–∑–º–µ—Ç—Ç–µ—Ä:\n"
        "‚Ä¢ –¢–µ—Ä–∞–ø–µ–≤—Ç ‚Äî 8:00‚Äì20:00\n"
        "‚Ä¢ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ ‚Äî 9:00‚Äì19:00\n"
        "‚Ä¢ –£–î–ó, –≠–ö–ì, “õ–∞–Ω —Ç–∞–ª–¥–∞—É—ã\n"
        "‚Ä¢ –ü–µ–¥–∏–∞—Ç—Ä, –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥ –∂”ô–Ω–µ –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥")

@bot.message_handler(func=lambda m: m.text == "üìû –ë–∞–π–ª–∞–Ω—ã—Å / –ñ–∞–∑—ã–ª—É")
def contact(message):
    bot.send_message(message.chat.id,
        "üìç –ú–µ–∫–µ–Ω–∂–∞–π: –®–∏–µ–ª—ñ, “í.–ú“±—Ä–∞—Ç–±–∞–µ–≤ 244\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (777) 123-45-67\n"
        "üïí –£–∞“õ—ã—Ç—ã: 8:00‚Äì20:00\n\n"
        "–û–Ω–ª–∞–π–Ω –∂–∞–∑—ã–ª—É “Ø—à—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑ üëá")

@bot.message_handler(func=lambda m: m.text == "üì∞ –ñ–∞“£–∞–ª—ã“õ—Ç–∞—Ä / –ê–∫—Ü–∏—è–ª–∞—Ä")
def news(message):
    bot.send_message(message.chat.id,
        "üì∞ –°–æ“£“ì—ã –∂–∞“£–∞–ª—ã“õ—Ç–∞—Ä –º–µ–Ω –∂–µ“£—ñ–ª–¥—ñ–∫—Ç–µ—Ä:\n"
        "‚Ä¢ 1 “õ–∞—Ä–∞—à–∞ ‚Äî —Ç–µ–≥—ñ–Ω “õ–∞–Ω —Ç–∞–ª–¥–∞—É—ã ü©∏\n"
        "‚Ä¢ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è–¥–∞ 20% –∂–µ“£—ñ–ª–¥—ñ–∫ üíé\n\n"
        "–¢–æ–ª—ã“ì—ã—Ä–∞“õ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É “Ø—à—ñ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑ üìû")

@bot.message_handler(func=lambda m: m.text == "üíä –ö–µ“£–µ—Å –∞–ª—É (AI)")
def ask_ai(message):
    bot.send_message(message.chat.id, "“ö–∞–Ω–¥–∞–π —Å–∏–º–ø—Ç–æ–º –±–∞—Ä? “ö—ã—Å“õ–∞ —Ç“Ø—Ä–¥–µ –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã: '–±–∞—Å—ã–º –∞—É—Ä—ã–ø —Ç“±—Ä').")

# --- üîπ –ë–∞—Ä–ª—ã“õ –±–∞—Å“õ–∞ –º”ô—Ç—ñ–Ω–¥–µ—Ä ‚Äî –Ü–Ü –∫–µ“£–µ—Å—ñ ---
@bot.message_handler(func=lambda m: True)
def handle_ai(message):
    text = (message.text or "").strip()
    if len(text) < 3:
        bot.send_message(message.chat.id, "”®—Ç—ñ–Ω—ñ—à, —Å–∏–º–ø—Ç–æ–º–¥—ã “õ—ã—Å“õ–∞—à–∞ ”ô—Ä—ñ –Ω–∞“õ—Ç—ã –∂–∞–∑—ã“£—ã–∑.")
        return

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content":
                 "–°–µ–Ω –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ –∫–µ“£–µ—Å—à—ñ –±–æ—Ç—Å—ã“£. –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ç–µ–∫ –∂–∞–ª–ø—ã, “õ–∞—É—ñ–ø—Å—ñ–∑ –∫–µ“£–µ—Å –±–µ—Ä. "
                 "–î–∏–∞–≥–Ω–æ–∑ “õ–æ–π–º–∞ –∂”ô–Ω–µ –Ω–∞“õ—Ç—ã –¥”ô—Ä—ñ-–¥”ô—Ä–º–µ–∫ –∂–∞–∑–±–∞. –ï–≥–µ—Ä —Å–∏–º–ø—Ç–æ–º “õ–∞—É—ñ–ø—Ç—ñ –±–æ–ª—Å–∞ "
                 "(–º—ã—Å–∞–ª—ã: “õ–∞–Ω –∫–µ—Ç—É, —Ç—ã–Ω—ã—Å –∞–ª—É “õ–∏—ã–Ω–¥—ã“ì—ã, –µ—Å—ñ–Ω–µ–Ω —Ç–∞–Ω—É) ‚Äî –¥–µ—Ä–µ—É –∂–µ–¥–µ–ª –∂”ô—Ä–¥–µ–º–≥–µ –±–∞—Ä—É–¥—ã “±—Å—ã–Ω."},
                {"role": "user", "content": text}
            ],
            max_tokens=350,
            temperature=0.3,
        )
        answer = completion["choices"][0]["message"]["content"].strip()
        bot.send_message(message.chat.id, answer)
    except Exception as e:
        print("OpenAI Error:", e)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–µ“£–µ—Å –∞–ª—É —Å”ô—Ç—Å—ñ–∑. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")

# --- üîπ Webhook –æ—Ä–Ω–∞—Ç—É –∂”ô–Ω–µ “õ–æ—Å—É ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    render_url = os.environ.get("RENDER_EXTERNAL_URL", "")
    if render_url.startswith("https://"):
        webhook_url = f"{render_url}/{TOKEN}"
    else:
        webhook_url = f"https://{render_url}/{TOKEN}"

    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)

    print("‚úÖ Webhook set to:", webhook_url)
    app.run(host="0.0.0.0", port=port)
